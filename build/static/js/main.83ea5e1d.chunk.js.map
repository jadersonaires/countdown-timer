{"version":3,"sources":["components/Header/styled.js","components/Header/index.js","components/Main/styled.js","components/Timer/styled.js","components/Timer/index.js","components/Main/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","styled","header","Index","props","nameDev","Main","main","Box","section","Item","article","Timer","className","id","days","hours","minutes","seconds","state","date","componentDidMount","calculeteDate","Date","handleChange","e","setState","target","value","interval","length","setInterval","range","setHours","getTime","Math","floor","clearInterval","name","type","this","onChange","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"whBAEO,IAAMA,EAASC,IAAOC,OAAV,KCWJC,EAVD,SAACC,GACX,OACI,oCACI,kBAACJ,EAAD,KACI,iCAAUI,EAAMC,Y,wxBCLzB,IAAMC,EAAOL,IAAOM,KAAV,K,giCCAV,IAAMC,EAAMP,IAAOQ,QAAV,KAaHC,EAAOT,IAAOU,QAAV,KCWFC,EAvBD,SAACR,GACX,OACI,kBAACI,EAAD,KACI,kBAACE,EAAD,KACI,yBAAKG,UAAU,SAASC,GAAG,QAAQV,EAAMW,MACzC,yCAEJ,kBAACL,EAAD,KACI,yBAAKG,UAAU,SAASC,GAAG,SAASV,EAAMY,OAC1C,0CAEJ,kBAACN,EAAD,KACI,yBAAKG,UAAU,SAASC,GAAG,WAAWV,EAAMa,SAC5C,4CAEJ,kBAACP,EAAD,KACI,yBAAKG,UAAU,SAASC,GAAG,WAAWV,EAAMc,SAC5C,8CCiDDZ,E,4MA/DXa,MAAQ,CACJC,KAAM,GACNL,KAAM,IACNC,MAAO,IACPC,QAAS,IACTC,QAAS,K,EAGbG,kBAAoB,WAChB,EAAKC,cAAc,IAAIC,O,EAG3BC,aAAe,SAACC,GACZ,EAAKC,SAAS,CAAEN,KAAMK,EAAEE,OAAOC,QAC/B,EAAKN,cAAcG,EAAEE,OAAOC,Q,EAGhCN,cAAgB,SAACF,GACb,IAAIS,EAAW,GACXT,EAAKU,OAAS,IACdD,EAAWE,aAAY,WAEnB,IAAMC,EAAQ,IAAIT,KAAK,EAAKJ,MAAMC,MAAMa,SAAS,GAAI,GAAI,KAAM,IAAIV,MAAOW,UAC1E,EAAKR,SAAS,CACVX,KAAMoB,KAAKC,MAAMJ,EAAK,OACtBhB,MAAOmB,KAAKC,MAAOJ,EAAK,MAAN,MAClBf,QAASkB,KAAKC,MAAOJ,EAAK,KAAN,KACpBd,QAASiB,KAAKC,MAAOJ,EAAK,IAAkB,OAE5CA,EAAQ,IACRK,cAAcR,GACd,EAAKH,SAAS,CAAEX,KAAM,IAAKC,MAAO,IAAKC,QAAS,IAAKC,QAAS,SAEnE,O,uDAKP,OACI,oCACI,kBAAC,EAAD,KACI,4CACA,0CACA,8BACI,2BACIoB,KAAK,OACLxB,GAAG,OACHyB,KAAK,OACLX,MAAOY,KAAKrB,MAAMC,KAClBqB,SAAUD,KAAKhB,iBAK3B,kBAAC,EAAD,CAAOT,KAAMyB,KAAKrB,MAAMJ,KACpBC,MAAOwB,KAAKrB,MAAMH,MAClBC,QAASuB,KAAKrB,MAAMF,QACpBC,QAASsB,KAAKrB,MAAMD,e,GA3DrBwB,aCcJC,MATf,WACC,OACC,gCACC,kBAAC,EAAD,CAAQtC,QAAQ,WAChB,kBAAC,EAAD,QCDiBuC,QACU,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACxB,2DCbFC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SD0HpB,kBAAmBC,WACtBA,UAAUC,cAAcC,MACtBC,MAAK,SAAAC,GACLA,EAAaC,gBAEbC,OAAM,SAAAC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.83ea5e1d.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nexport const Header = styled.header`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: 1rem;\r\n    margin-bottom: 2rem;\r\n\r\n    address{\r\n        font-weight: var(--font-light);\r\n        color: var(--color-white);\r\n    }\r\n`","import React from 'react'\r\nimport { Header } from './styled'\r\n\r\nconst Index = (props) => {\r\n    return (\r\n        <>\r\n            <Header>\r\n                <address>{props.nameDev}</address>\r\n            </Header>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Index","import styled from 'styled-components'\r\n\r\nexport const Main = styled.main`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin-bottom: 2rem;\r\n\r\n    h1{\r\n        font-size: 4rem;\r\n        font-weight: var(--font-bold);\r\n        color: var(--color-white)\r\n    }\r\n\r\n    p{\r\n        font-weight: var(--font-regular);\r\n        color: var(--color-white);\r\n        margin-bottom: 1rem;\r\n    }\r\n\r\n    input{\r\n        border-radius: 4px;\r\n        height: 30px;\r\n        background-color: white;\r\n        border: none;\r\n        box-sizing: border-box;\r\n        padding: .4rem;\r\n        margin-bottom: 1rem;\r\n    }\r\n\r\n    @media (max-width: 680px){\r\n        h1{\r\n            font-size: 2rem;\r\n        }\r\n    }\r\n`","import styled from 'styled-components'\r\n\r\nexport const Box = styled.section`\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: 1rem 0 7rem 0;\r\n\r\n    @media (max-width: 680px){\r\n        padding: 1rem 0 2rem 0;\r\n    }\r\n`\r\n\r\nexport const Item = styled.article`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 15%;\r\n    border-radius: 4px;\r\n    background: rgba(0,0,0, 0.5);\r\n    margin-left: 1rem;\r\n\r\n    .number{\r\n        font-size: 5rem;\r\n        font-weight: var(--font-bold);\r\n        color: var(--color-white);\r\n        margin: .4rem;\r\n    }\r\n\r\n    footer{\r\n        font-weight: var(--font-light);\r\n        color: var(--color-white);\r\n        margin-bottom: .3rem;\r\n    }\r\n\r\n    @media (max-width: 680px){\r\n        .number{\r\n            font-size: 2.5rem;\r\n        }\r\n    }\r\n\r\n    @media (max-width: 500px){\r\n        width: 45%;\r\n        margin: 0 0.5rem 1rem .5rem;\r\n    }\r\n`","import React from 'react'\r\nimport { Box, Item} from './styled'\r\n\r\nconst Timer = (props) => {\r\n    return (\r\n        <Box>\r\n            <Item>\r\n                <div className=\"number\" id=\"days\">{props.days}</div>\r\n                <footer>Days</footer>\r\n            </Item>\r\n            <Item>\r\n                <div className=\"number\" id=\"hours\">{props.hours}</div>\r\n                <footer>Hours</footer>\r\n            </Item>\r\n            <Item>\r\n                <div className=\"number\" id=\"minutes\">{props.minutes}</div>\r\n                <footer>Minutes</footer>\r\n            </Item>\r\n            <Item>\r\n                <div className=\"number\" id=\"seconds\">{props.seconds}</div>\r\n                <footer>Seconds</footer>\r\n            </Item>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Timer","import React, { Component } from 'react';\r\nimport { Main as  MainDiv } from './styled'\r\nimport Timer from '../Timer'\r\n\r\nclass Main extends Component {\r\n\r\n    state = {\r\n        date: '',\r\n        days: 'D',\r\n        hours: 'O',\r\n        minutes: 'N',\r\n        seconds: 'E'\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.calculeteDate(new Date())\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({ date: e.target.value })\r\n        this.calculeteDate(e.target.value)\r\n    }\r\n\r\n    calculeteDate = (date) => {\r\n        let interval = ''\r\n        if (date.length > 0) {\r\n            interval = setInterval(() => {\r\n\r\n                const range = new Date(this.state.date).setHours(23, 59, 59) - new Date().getTime()\r\n                this.setState({\r\n                    days: Math.floor(range / (1000 * 60 * 60 * 24)),\r\n                    hours: Math.floor((range % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\r\n                    minutes: Math.floor((range % (1000 * 60 * 60)) / (1000 * 60)),\r\n                    seconds: Math.floor((range % (1000 * 60)) / 1000)\r\n                })\r\n                if (range < 0) {\r\n                    clearInterval(interval);\r\n                    this.setState({ days: 'D', hours: 'O', minutes: 'N', seconds: 'E' })\r\n                }\r\n            }, 1000)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <MainDiv>\r\n                    <h1>Comming Soon</h1>\r\n                    <p>stay turned</p>\r\n                    <form>\r\n                        <input\r\n                            name=\"date\"\r\n                            id=\"date\"\r\n                            type=\"date\"\r\n                            value={this.state.date}\r\n                            onChange={this.handleChange}\r\n                        />\r\n                    </form>\r\n                </MainDiv>\r\n\r\n                <Timer days={this.state.days}\r\n                    hours={this.state.hours}\r\n                    minutes={this.state.minutes}\r\n                    seconds={this.state.seconds} />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main;","import React from 'react';\n\n//Css\nimport './css/styles.css'\n\n//Components\nimport Header from './components/Header'\nimport Main from './components/Main'\n\nfunction App() {\n\treturn (\n\t\t<hgroup>\n\t\t\t<Header nameDev=\"GitHub\" />\n\t\t\t<Main />\n\t\t</hgroup>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t// [::1] is the IPv6 localhost address.\n\twindow.location.hostname === '[::1]' ||\n\t// 127.0.0.0/8 are considered localhost for IPv4.\n\twindow.location.hostname.match(\n\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t)\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' },\n\t})\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.'\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then(registration => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}